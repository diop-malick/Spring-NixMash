
// =======================================================================================
// BuildScript : used if our gradle build script uses external plugins such as dependency-management and boot-gradle-plugin
// ======================================================================================
buildscript {

    // Define which maven repository should be used to download external Gradle plugins.
    repositories {
		mavenLocal()
		mavenCentral() // replace the old part: jcenter() by mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url 'http://repo.spring.io/milestone' }
        maven { url "https://plugins.gradle.org/m2/" }
	}
    /* Add external gradle plugins to the buildscript classpath so they can be used by the buildscirpt itself
     _version is specified in gradle.properties */
	dependencies {
        /*  Spring Boot Gradle plugin | http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html
         purposes : package project to an executable jar/war, execute the project, version management of third party dependencies  ( allows dependencies to be declared without a version)*/
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        /* provides Maven-like <dependencyManagement> functionality
            https://github.com/spring-gradle-plugins/dependency-management-plugin */
        classpath "io.spring.gradle:dependency-management-plugin:${gradle_dependency_management_plugin_version}"

        classpath "org.springframework:springloaded:${spring_loaded_version}"

        /* Provides additional optional and provided dependency configurations for Gradle
            https://github.com/spring-projects/gradle-plugins/tree/master/propdeps-plugin */
		classpath "org.springframework.build.gradle:propdeps-plugin:${gradle_propdeps_plugin_version}"
        /* Gradle plugin making it easier/safer to use Java annotation processors
            https://github.com/tbroyer/gradle-apt-plugin */
        classpath "net.ltgt.gradle:gradle-apt-plugin:${gradle_apt_plugin_version}"

    }
}


// ======================================================================================
// Configuration that is shared between all the subprojects without rootProject
// ======================================================================================

subprojects {

    apply plugin: 'application' // https://docs.gradle.org/current/userguide/application_plugin.html
    apply plugin: 'java' // This plugin adds some tasks to your project which will compile and unit test your Java source code, and bundle it into a JAR file.

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

// ======================================================================================
// rootProject and the subprojects
// ======================================================================================

allprojects {

    group = 'com.nixmash'
    version= '0.0.1-SNAPSHOT'

    apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'spring-boot'
	apply plugin: 'propdeps'

	defaultTasks 'bootRun'

    // repositories for defining the location(s) of the project dependencies
	repositories {
        mavenLocal()
        mavenCentral() // URL used -> https://repo1.maven.org/maven2/
        jcenter() // points to maven repository provided by bintray located available at bintray.com/bintray/jcenter
        maven { url 'http://repo.spring.io/milestone' }
		maven { url 'http://repo.spring.io/snapshot' }
		maven { url "http://maven.restlet.org" }
        maven { url 'http://repo.maven.apache.org/maven2' } // another central maven Repo

    }

	dependencies {

        // METRICS
        compile "io.dropwizard.metrics:metrics-core"
        compile "io.dropwizard.metrics:metrics-annotation:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-ehcache:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-healthchecks:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-jvm:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-servlet:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-json:${dropwizard_metrics_version}"
        compile ("io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}") {
            exclude(module: 'metrics-healthchecks')
        }
        compile ("com.ryantenney.metrics:metrics-spring:${metrics_spring_version}") {
            exclude(module: 'metrics-core')
            exclude(module: 'metrics-healthchecks')
        }
        //reporting
        compile "fr.ippon.spark.metrics:metrics-spark-reporter:${metrics_spark_reporter_version}"
        // Logback encoder which creates JSON for use with Logstash
        compile("net.logstash.logback:logstash-logback-encoder:${logstash_logback_encoder_version}") {
            exclude(module: 'ch.qos.logback')
        }

        // Jackson
        compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jackson_version}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${jackson_version}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4"
        compile "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"
        compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"

        // production-quality connection pool
        compile("com.zaxxer:HikariCP") {
            exclude(module: 'tools')
        }

        // Hibernate
        // Hibernate second-level cache
        compile ("org.hibernate:hibernate-ehcache") {
            exclude(module: 'ehcache-core')
        }
        // auditing/versioning of persistent classes
        compile "org.hibernate:hibernate-envers"
        //  allows to express and validate application constraints
        compile "org.hibernate:hibernate-validator"

        // Spring
		compile 'org.springframework.boot:spring-boot-actuator'
		compile 'org.springframework.boot:spring-boot-autoconfigure'
        optional "org.springframework.boot:spring-boot-configuration-processor"
        // Tools allow  Maven or Gradle plugin to automatically generate executable JAR/WAR files
        compile "org.springframework.boot:spring-boot-loader-tools"

        compile ("org.springframework:spring-context-support")

        // starter logging is bring by starter-web
        // compile "org.springframework.boot:spring-boot-starter-logging"
        compile "org.springframework.boot:spring-boot-starter-aop"

        // Spring
        // contains : spring-boot-starter-jdbc + spring-data-jpa + hibernate-core + hibernate-entitymanager + javax.transaction-api + spring-aspects
		compile 'org.springframework.boot:spring-boot-starter-data-jpa'
        // contains : spring-web + spring-webmvc + starter-tomcat + hibernate-validator + jackson-databind
        compile "org.springframework.boot:spring-boot-starter-web"
        // provides: spring-security-web + spring-security-config
        compile 'org.springframework.boot:spring-boot-starter-security'
		compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
		compile 'org.springframework.security:spring-security-test:4.1.0.RELEASE'

        // Common Utils
        compile "org.apache.commons:commons-lang3:${commons_lang_version}"
        compile "commons-io:commons-io:${commons_io_version}"
        compile "javax.inject:javax.inject:${javax_inject_version}"
        // provides easy-to-use wrappers around  around reflection(java.lang.reflect) and introspection(java.beans) |http://commons.apache.org/proper/commons-beanutils/
        compile "commons-beanutils:commons-beanutils:${commons_beanutils}"

		// compile 'javax.servlet:javax.servlet-api' // TODO delete
        // Google Core Libraries | https://github.com/google/guava
        compile 'com.google.guava:guava-gwt:19.0'
		// compile 'javax.el:javax.el-api:3.0.1-b04' // TODO delete
		compile 'org.jadira.usertype:usertype.extended:3.2.0.GA'
        //  a thumbnail generation library for Java | https://github.com/coobird/thumbnailator
		compile 'net.coobird:thumbnailator:0.4.8'
		compile 'joda-time:joda-time:2.9.4'

		//runtime 'com.h2database:h2'
		//runtime 'mysql:mysql-connector-java'
        compile "mysql:mysql-connector-java"
        compile "com.h2database:h2"


        // to check ????? TODO
        // compile 'javax.servlet:javax.servlet-api'
        //compile 'javax.el:javax.el-api:3.0.1-b04'


        // https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/spring-boot-starter-test/pom.xml
        //Starter for testing Spring Boot applications with libraries including JUnit, Hamcrest and Mockito
		// provides : Junit + spring Test + AssertJ + Hamcrest + Mocito + JsonAssert + JsonPath (jayway) 
		testCompile 'org.springframework.boot:spring-boot-starter-test'

        /* TODO : to delete
			testCompile "org.assertj:assertj-core:${assertj_core_version}" // not yet in starter-test
			testCompile 'junit:junit'
			testCompile "org.mockito:mockito-core"
			testCompile "org.hamcrest:hamcrest-library"
		*/
	}


    springBoot {
        mainClass = 'com.nixmash.springdata.mvc.Application'
    }

    // IDE configuration block
    // http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#howto-reload-springloaded-gradle-and-intellij-idea
    idea {
        module {
            inheritOutputDirs = false
            downloadJavadoc = true
            outputDir = file("$buildDir/classes/main/")
        }
    }
    eclipse {
        classpath {
            downloadJavadoc = true
            // containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            // containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }

	task getHomeDir << {
		println gradle.gradleHomeDir
	}

    task cleanResources(type: Delete) {
        delete 'build/resources'
    }

}


// ======================================================================================
// Wrapper
// ======================================================================================

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}


// ======================================================================================
// Configuration for root project only
// ======================================================================================

// This change turns the Spring Boot Gradle plugin's repackager off for the common project, since it's not supposed to run as a standalone application.
bootRepackage {
    enabled = false
}

// ======================================================================================
// Profiles
// ======================================================================================

// load profile Build config
if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

