apply plugin: 'war'

description = 'NixMash mvc Module'

war {
	baseName = 'nixmashSpring'

    manifest {
        attributes 'Main-Class': 'com.nixmash.springdata.mvc.Application'
    }

    /*   to exclude from a 'war' archive
   Any exclude specified on the rootSpec will automatically apply files copied into the war file, including 'WEB-INF'.*/
    rootSpec.exclude("**/tomcat-*.jar")
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    providedRuntime
}


sourceSets {
	main {
		java.srcDirs = ['src/main/java', 'src/main/resources']
		resources.srcDir 'src/main/resources'
	}
	test { java.srcDir 'src/test/java' }
}

dependencies {

    // Sub project Module dependency
	compile project(':jpa'), project(':solr'), project(':mail'), project(':jsoup')

    // Web : Support for full-stack web development, including spring-webmvc and Tomcat (as an embedded container by default)
	compile 'org.springframework.boot:spring-boot-starter-web'
	
    compile "org.springframework.boot:spring-boot-starter-websocket"


    // Import Tomcat Spring Boot’s default HTTP engine
    // Already added in profile_x.gradle
    // providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    // Thymeleaf templating engine, including integration with Spring
	// provide : thymeleaf-spring4 + thymeleaf-layout-dialect
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE' // TODO to check f already provide by starter-thymeleaf or starter-security ?
    /* compile 'org.thymeleaf:thymeleaf-spring4:2.1.4.RELEASE' */ // TODO to delete
    compile 'com.github.dandelion:datatables-thymeleaf:1.1.0'

    // Social | FaceBook
	compile 'org.springframework.boot:spring-boot-starter-social-twitter'
	compile 'org.springframework.boot:spring-boot-starter-social-facebook'
    compile 'org.springframework.social:spring-social-google:1.0.0.RELEASE'

	compile 'org.springframework.social:spring-social-security:1.1.4.RELEASE'

    compile "org.springframework.boot:spring-boot-starter-security"

    compile 'com.jayway.restassured:json-path:2.4.1'
	compile 'com.jayway.jsonpath:json-path-assert:2.0.0'

    // Webjars
	compile 'org.webjars:webjars-locator:0.27'
	compile 'org.webjars:webjars-locator-core:0.27'
	compile 'org.webjars:jquery:2.1.4'
	compile 'org.webjars:bootstrap:3.3.4'
	compile 'org.webjars:bootswatch:3.3.4+1'
	compile 'org.webjars:jquery-ui:1.11.4'
	compile 'org.webjars:jquery-ui-themes:1.11.4'
	compile 'com.rometools:rome:1.6.1'

	compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
	compile 'com.fasterxml.jackson.core:jackson-core:2.6.0'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.6.0'
	compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'

	//noinspection GroovyAssignabilityCheck
	testCompile project(':jpa').sourceSets.test.output
	testCompile project(':mail').sourceSets.test.output
}

/* http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html
To run a project in place without building a jar first you can use the “bootRun” task


*/
bootRun {
    // True Making static classpath resources reloadable means that using bootRun, your application will use the resources in their unprocessed form.
    addResources = false
    // 1Sst in PropertySource Command line arguments used by spriggBoot
    systemProperty 'server.port', '9000'
	systemProperty 'spring.profiles.active', 'dev, mysql'
	args "--appurl=http://localhost:9000"
	main = 'com.nixmash.springdata.mvc.common.Application'
}

/* http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html#build-tool-plugins-gradle-repackage-configuration */
bootRepackage {
    //enabled = false
    mainClass = 'com.nixmash.springdata.mvc.Application'
}

springBoot {
    mainClass = 'com.nixmash.springdata.mvc.Application'
    executable = true

}


task stage(dependsOn: 'bootRepackage') {
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources


